Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 36e6847
Subject: Fix remaining issues with std::any
Date: Wed, 21 Oct 2020 22:17:21 -0400

fffffff... last issue with std::any seems resolved - we need to include the
exact type or it defaults to a variety of signed types and will throw a
bad_any_cast if you try to extract as unsigned

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 03e2c60
Subject: Various fixes and build improvement attempts
Date: Wed, 21 Oct 2020 22:11:36 -0400

The Makefile changes are my attempt to get deps to work, the rest is fixes to
the farking std::any stuff - looks like we're getting a bit of sign extension
that needs addressed now
(Note: turns out that it was defaulting to storing signed data and
and the sign-extension was part of that)

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 1d562a5
Subject: .gitignore update
Date: Wed, 21 Oct 2020 22:10:51 -0400

exclude the output executable

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: e9417f1
Subject: TODO Update
Date: Wed, 21 Oct 2020 21:10:51 -0400

update the TODO to reflect current form of app

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: b8227b0
Date: Wed, 21 Oct 2020 20:42:34 -0400

1) Rework vc4_parameter to use a more literate variant of the classic "enum",
   liberally borrowed from https://www.codeproject.com/Articles/1002895/Clean-Reflective-Enums-Cplusplus-Enum-to-String-wi
2) Rework vc4_parameter to use the C++17 "std::any" for data storage
3) Split out the vector helpers to their own file as having them in a header
   made for a multi-definition mess
4) Rework almost everything else to cover for the above changes. Test seems to
   sometimes fail, but in an odd way where it complains that there is a
   "std::bad_any_cast" exception. Seems to have disappeared when a try/catch
   was added for that specific situation.
   (Note: no, it just farking hid it - the exception was still happening.
    Fixed in a later commit)

---

Change Source: dshadowwolf <dshadowwolf@gmail.com>
Commit: 4812c05
Subject: replace a placeholder with the actual character
Date: Wed, 21 Oct 2020 17:38:41 -0400

Emacs was being a right proper b*tch about a single unicode character, lets fix that.

--

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 8ffaa7a
Subject: finally add a README
Date: Wed, 21 Oct 2020 17:37:28 -0400

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: a938c08
Subject: start on decoding VECTOR48
Date: Wed, 21 Oct 2020 11:58:15 -0400

1) static data updates
2) add a helper for vector instructions (decoding vector register stuff)
3) start work on VECTOR48 decoding

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: c3e452a
Subject: wolf f*cked up
Date: Wed, 21 Oct 2020 03:25:23 -0400

Actually fixed. The docs by @hermanhermitage were correct. There was a fencepost
error in the instruction decode where I had '(insn & 0x01e0) >> 8' and the code
expected that to be '(insn & 0x01e0) >> 9'.

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: cb78705
Subject: update TODO to reflect current status
Date: Wed, 21 Oct 2020 03:10:43 -0400

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 6cc027b
Subject: Fix SCALAR16 decoding
Date: Wed, 21 Oct 2020 03:10:26 -0400

The sp-involved add and the 'conditional branch' instructions were not decoding
because a state had been missed in the decode dispatch routine. This commit adds
that state and fixes the SCALAR16 decoding so it now properly understands the
conditional branch and sp-involved add instruction and can decode them correctly.

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 47b2945
Subject: fix a condition-code name
Date: Wed, 21 Oct 2020 03:09:35 -0400

It was in as 'always', but on re-checking extended information made available by
@hermanhermitage it is actually 'ra'. Might need to do similar for 'never' at
some point in the future.

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 77cd52b
Subject: SCALAR16 decode issues fix
Date: Wed, 21 Oct 2020 02:47:29 -0400

fix some of the decoding issues. Still need to work out why a b<cc> is decoding
as a load/store pair.
(Note: final fix happens in Commit 6cc027b)

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: bdfaef0
Subject: update the .gitignore and add a TODO
Date: Tue, 20 Oct 2020 13:36:02 -0400

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 8778d38
Subject: ready things for testing
Date: Tue, 20 Oct 2020 13:27:24 -0400

Add a simple Makefile and a basic chunk of code to drive the existing
instruction decoders

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 474c048
Subject: add scalar48 decoding
Date: Tue, 20 Oct 2020 11:50:00 -0400

SCALAR48 is the last of the instruction sizes known to be used in the "B+"
targeted 'blinker01.bin' available in one of @hermanhermitages repositories.
Implement the instruction decoder for it.

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: b31f1a5
Subject: add the .gitignore
Date: Mon, 19 Oct 2020 23:47:10 -0400

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 2b0ed36
Subject: add a test input file
Date: Mon, 19 Oct 2020 23:46:03 -0400

use blinker01.bin' from @hermanhermitage for testing the disassembler

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: aaf5209
Commit: a1e04ca
Subject: implement SCALAR32 decoder
Date: Mon, 19 Oct 2020 23:23:03 -0400

1) Add a lot of data to the shared/constant data pool
2) Implement a decoder for SCALAR32 instructions

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 72bbc72
Subject: Finish SCALAR16 decoder
Date: Mon, 19 Oct 2020 19:25:35 -0400

1) make the opcodes able to describe themselves
2) finish out the scalar16 decoding

---

Change Source: Daniel Hazelton <dshadowwolf@gmail.com>
Commit: 3450ac0
Subject: Initial Commit for Project
Date: Mon, 19 Oct 2020 17:52:49 -0400

Proof of concept in pure C was showing progress, lets port to a slightly better
language for the encapsulation and make things work.

---

EOF
